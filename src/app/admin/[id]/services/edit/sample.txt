// src/app/admin/services/[id]/page.tsx
"use client";

import React, { useEffect, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import { toast } from "react-hot-toast";

import { useServices } from "@/hooks/useServices";
import { useCategories } from "@/hooks/useCategory";
import { UpdateServiceInput } from "@/store/type/service-categories";
import { updateService } from "@/store/slices/service-slice";

import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import PageHeader from "../new/PageHeader";
import ErrorMessage from "../new/ErrorMessage";
import { Toaster } from "@/components/ui/toaster";
import LoadingSpinner from "../new/LoadingSpiner";
import {
  CreateServiceFormData,
  createServiceFormSchema,
} from "../new/service-shema";
import CreateServiceForm from "../new/form-components/CreateServiceForm";

// Transform function to convert form data to UpdateServiceInput
const transformToUpdateServiceInput = (
  formData: CreateServiceFormData
): Omit<UpdateServiceInput, "id"> => {
  return {
    title: formData.title,
    description: formData.description,
    categoryId: formData.categoryId,
    isActive: formData.isActive,
    popular: formData.popular,
    pricing: formData.pricing
      ? {
          basePrice: formData.pricing.basePrice,
          currency: formData.pricing.currency,
        }
      : undefined,
  };
};

const ServiceDetailPage: React.FC = () => {
  const router = useRouter();
  const params = useParams();
  const serviceId = params?.id as string;

  const {
    currentService,
    updateExistingService,
    removeService,
    toggleStatus,
    loadService,
    clearService,
    resetErrors,
    loading,
    error,
  } = useServices();

  const {
    selectedCategory,
    loadCategory,
    getCategoryById,
    loading: categoryLoading,
    error: categoryError,
  } = useCategories();

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);
  const [loadAttempts, setLoadAttempts] = useState(0);

  // Get current category
  const currentCategory =
    selectedCategory ||
    (currentService?.categoryId
      ? getCategoryById(currentService.categoryId)
      : null);

  // Effects
  useEffect(() => {
    let isMounted = true;

    const initializePage = async () => {
      try {
        if (!serviceId) {
          toast.error("Service ID is required");
          router.push("/admin");
          return;
        }

        // Only load service if we don't have it or it's different
        if (!currentService || currentService.id !== serviceId) {
          setLoadAttempts((prev) => prev + 1);
          await loadService(serviceId, true);
        }

        if (isMounted) {
          setIsInitialized(true);
        }
      } catch (error) {
        console.error("Error initializing page:", error);
        if (isMounted) {
          setIsInitialized(true);
        }
      }
    };

    initializePage();

    return () => {
      isMounted = false;
    };
  }, [serviceId, loadService, router]);

  // Separate effect for category loading
  useEffect(() => {
    if (currentService?.categoryId && !currentCategory && !categoryLoading) {
      loadCategory(currentService.categoryId, false);
    }
  }, [
    currentService?.categoryId,
    currentCategory,
    categoryLoading,
    loadCategory,
  ]);

  // Clear errors on component mount/unmount
  useEffect(() => {
    resetErrors();
    return () => {
      resetErrors();
      clearService();
    };
  }, [resetErrors, clearService]);

  // Add timeout fallback for loading state
  useEffect(() => {
    const timeout = setTimeout(() => {
      if (!isInitialized && loadAttempts > 0) {
        console.warn("Service loading timeout, forcing initialization");
        setIsInitialized(true);
      }
    }, 15000); // 15 second timeout

    return () => clearTimeout(timeout);
  }, [isInitialized, loadAttempts]);

  // Retry mechanism for failed loads
  useEffect(() => {
    if (
      isInitialized &&
      !currentService &&
      !loading &&
      !error &&
      loadAttempts < 3
    ) {
      const retryTimeout = setTimeout(() => {
        console.log(`Retrying service load, attempt ${loadAttempts + 1}`);
        setLoadAttempts((prev) => prev + 1);
        loadService(serviceId, true);
      }, 2000);

      return () => clearTimeout(retryTimeout);
    }
  }, [
    isInitialized,
    currentService,
    loading,
    error,
    loadAttempts,
    serviceId,
    loadService,
  ]);

  // Handlers
  const handleFormSubmit = async (formData: CreateServiceFormData) => {
    if (!currentService) return;

    try {
      setIsSubmitting(true);
      resetErrors();

      // Validate form data
      const validationResult = createServiceFormSchema.safeParse(formData);
      if (!validationResult.success) {
        const errors: Record<string, string> = {};
        validationResult.error.errors.forEach((error) => {
          const path = error.path.join(".");
          errors[path] = error.message;
        });

        const errorMessages = Object.values(errors).join(", ");
        toast.error(`Please fix the form errors: ${errorMessages}`);
        return;
      }

      // Transform and update service
      const serviceInput: UpdateServiceInput = {
        id: currentService.id,
        ...transformToUpdateServiceInput(validationResult.data),
      };

      const result = await updateExistingService(serviceInput);

      if (updateService.fulfilled.match(result)) {
        toast.success("Service updated successfully");
        router.push(`/admin/${currentService.categoryId}/services`);
      } else {
        throw new Error(
          (result.payload as string) || "Failed to update service"
        );
      }
    } catch (error) {
      console.error("Error updating service:", error);
      toast.error(
        error instanceof Error ? error.message : "Failed to update service"
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDelete = async () => {
    if (!currentService) return;

    if (
      !confirm(
        "Are you sure you want to delete this service? This action cannot be undone."
      )
    ) {
      return;
    }

    try {
      setIsDeleting(true);
      const result = await removeService(currentService.id);

      if (result.meta.requestStatus === "fulfilled") {
        toast.success("Service deleted successfully");
        router.push(`/admin/${currentService.categoryId}/services`);
      } else {
        throw new Error("Failed to delete service");
      }
    } catch (error) {
      console.error("Error deleting service:", error);
      toast.error(
        error instanceof Error ? error.message : "Failed to delete service"
      );
    } finally {
      setIsDeleting(false);
    }
  };

  const handleToggleStatus = async () => {
    if (!currentService) return;

    try {
      const result = await toggleStatus(currentService.id);

      if (result.meta.requestStatus === "fulfilled") {
        toast.success(
          `Service ${
            currentService.isActive ? "deactivated" : "activated"
          } successfully`
        );
      } else {
        throw new Error("Failed to toggle service status");
      }
    } catch (error) {
      console.error("Error toggling service status:", error);
      toast.error(
        error instanceof Error
          ? error.message
          : "Failed to toggle service status"
      );
    }
  };

  const handleCancel = () => {
    resetErrors();
    router.push(`/admin/${currentService?.categoryId || ""}/services`);
  };

  const handleGoBack = () => {
    resetErrors();
    router.back();
  };

  const handleRetryLoad = () => {
    setIsInitialized(false);
    setLoadAttempts(0);
    resetErrors();
    loadService(serviceId, true);
  };

  // Loading states - Show loading only if not initialized and actively loading
  if (!isInitialized && loading && loadAttempts < 3) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[400px] bg-white dark:bg-gray-900">
        <LoadingSpinner size="lg" />
        <p className="mt-4 text-gray-600 dark:text-gray-400">
          Loading service details... (Attempt {loadAttempts + 1}/3)
        </p>
      </div>
    );
  }

  // Error states
  if (error) {
    return (
      <div className="container mx-auto px-4 py-8 bg-white dark:bg-gray-900 min-h-screen">
        <ErrorMessage
          title="Failed to load service"
          message={typeof error === "string" ? error : JSON.stringify(error)}
          onRetry={handleRetryLoad}
        />
      </div>
    );
  }

  if (categoryError) {
    return (
      <div className="container mx-auto px-4 py-8 bg-white dark:bg-gray-900 min-h-screen">
        <ErrorMessage
          title="Failed to load category"
          message={categoryError}
          onRetry={() =>
            currentService?.categoryId &&
            loadCategory(currentService.categoryId, false)
          }
        />
      </div>
    );
  }

  if (isInitialized && !currentService) {
    return (
      <div className="container mx-auto px-4 py-8 bg-white dark:bg-gray-900 min-h-screen">
        <ErrorMessage
          title="Service not found"
          message="The requested service could not be found."
          onRetry={handleGoBack}
          retryLabel="Go Back"
        />
      </div>
    );
  }

  // Show skeleton while service is loading but we're initialized
  if (!currentService) {
    return (
      <div className="container mx-auto px-4 py-8 max-w-4xl bg-white dark:bg-gray-900 min-h-screen transition-colors duration-200">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mb-4"></div>
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2 mb-8"></div>
          <Card className="p-6 bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700">
            <div className="space-y-4">
              <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
              <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
              <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  // Convert service data to form format
  const defaultValues: CreateServiceFormData = {
    title: currentService.title,
    description: currentService.description,
    categoryId: currentService.categoryId,
    isActive: currentService.isActive,
    popular: currentService.popular || false,
    pricing: {
      basePrice: currentService.pricing?.basePrice || 0,
      currency: currentService.pricing?.currency || "USD",
    },
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl bg-white dark:bg-gray-900 min-h-screen transition-colors duration-200">
      <PageHeader
        title="Edit Service"
        subtitle={`Update ${currentService.title} in ${
          currentCategory?.name || "Unknown"
        } category`}
        breadcrumbs={[
          { label: "Admin", href: "/admin" },
          {
            label: "Categories",
            href: `/admin/${currentService.categoryId}`,
          },
          {
            label: currentCategory?.name || "Category",
            href: `/admin/${currentService.categoryId}/services`,
          },
          { label: currentService.title, href: "#", current: true },
        ]}
        actions={
          <div className="flex gap-2">
            <Button
              variant="outline"
              onClick={handleToggleStatus}
              disabled={isSubmitting || isDeleting}
              className={`border-gray-300 dark:border-gray-600 transition-colors duration-200 ${
                currentService.isActive
                  ? "text-orange-700 dark:text-orange-300 hover:bg-orange-50 dark:hover:bg-orange-900/20"
                  : "text-green-700 dark:text-green-300 hover:bg-green-50 dark:hover:bg-green-900/20"
              }`}
            >
              {currentService.isActive ? "Deactivate" : "Activate"}
            </Button>
            <Button
              variant="destructive"
              onClick={handleDelete}
              disabled={isSubmitting || isDeleting}
              className="bg-red-600 hover:bg-red-700 text-white transition-colors duration-200"
            >
              {isDeleting ? "Deleting..." : "Delete"}
            </Button>
            <Button
              variant="outline"
              onClick={handleCancel}
              disabled={isSubmitting || isDeleting}
              className="border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors duration-200"
            >
              Cancel
            </Button>
          </div>
        }
      />

      <div className="mt-8">
        <Card className="p-6 bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm dark:shadow-gray-900/10 transition-colors duration-200">
          {currentCategory && (
            <div className="mb-6 p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600 transition-colors duration-200">
              <div className="flex items-center gap-3">
                {currentCategory.icon && (
                  <div className="text-2xl filter dark:brightness-110">
                    {currentCategory.icon}
                  </div>
                )}
                <div>
                  <h3 className="font-semibold text-lg text-gray-900 dark:text-gray-100">
                    {currentCategory.name}
                  </h3>
                  {currentCategory.description && (
                    <p className="text-gray-600 dark:text-gray-400 text-sm mt-1">
                      {currentCategory.description}
                    </p>
                  )}
                </div>
              </div>
            </div>
          )}

          <div className="mb-6">
            <span
              className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                currentService.isActive
                  ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300"
                  : "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300"
              }`}
            >
              {currentService.isActive ? "Active" : "Inactive"}
            </span>
            {currentService.popular && (
              <span className="ml-2 inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300">
                Popular
              </span>
            )}
          </div>

          <div className="space-y-6">
            <CreateServiceForm
              categoryId={currentService.categoryId}
              category={
                currentCategory as import("@/store/type/service-categories").Category
              }
              onSubmit={handleFormSubmit}
              onCancel={handleCancel}
              isSubmitting={isSubmitting}
              defaultValues={defaultValues}
            />
          </div>
        </Card>
      </div>
      <Toaster />
    </div>
  );
};

export default ServiceDetailPage;
